import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
    	jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version =  '0.1.0-SNAPSHOT'
def appName='hub-detect-ws'

apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

String blackduckDir = "/opt/blackduck"
String imagePgmDir = "${blackduckDir}/${appName}"

final def versionFile = new File("${projectDir}/src/main/resources/version.properties")
versionFile.delete()
versionFile << "program.version=${version}"

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/libs/${appName}-${version}.jar"
            artifact (artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications ('mavenJava') }
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
	// TEMP: pick up snapshots for dependency libs
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("com.blackducksoftware.integration:integration-common:9.2.0")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("io.prometheus:simpleclient_spring_boot:0.2.0")
    compile("io.prometheus:simpleclient_hotspot:0.2.0")
    compile("io.prometheus:simpleclient_dropwizard:0.2.0")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'org.apache.commons:commons-exec:1.3'
    testCompile 'io.fabric8:kubernetes-client:3.1.8'
    testCompile 'io.fabric8:kubernetes-model:2.0.8'
}

//////////// Create Docker Containers ///////////
task createDockerfile(type: Dockerfile) {
            destFile = project.file("${buildDir}/image/${appName}/Dockerfile")
            println "destFile: ${destFile}"
            from 'alpine:3.5'
            maintainer 'Synosys Software Integrity Group'
            exposePort 8080
            runCommand 'apk update && apk add bash && apk add openjdk8-jre'
            runCommand "mkdir -p ${imagePgmDir}/target"
            addFile("${appName}-${version}.jar", "${imagePgmDir}/${appName}.jar")
            runCommand "chown -R 10001 ${imagePgmDir}"
            user '10001'
            entryPoint "java", "-jar", "${imagePgmDir}/${appName}.jar", "--server.port=8080"
}


task copyJarToDockerfileDir(type: Copy, dependsOn: build) {
			from "build/libs/${project.name}-${version}.jar"
			into "${buildDir}/image/${appName}"
			rename ("${project.name}-${version}.jar", "${appName}-${version}.jar")
}

task removeDockerImage(type: Exec) {
			ignoreExitValue true
            commandLine "docker", "rmi", "blackducksoftware/${appName}:${version}"
}

task buildImageDir(dependsOn: [createDockerfile, copyJarToDockerfileDir]) {
}

task buildImage(type: Exec, dependsOn: [removeDockerImage, buildImageDir]) {
            commandLine "docker", "build", "--tag", "blackducksoftware/${appName}:${version}", \
                "${buildDir}/image/${appName}"
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_HUB_USER", "--password", "$System.env.DOCKER_HUB_PASSWORD"
}

task pushImage(type: Exec, dependsOn: [buildImage, dockerLogin]) {
	commandLine "docker", "push", "blackducksoftware/${appName}:${version}"
}

// Prepare test config file
// System.getProperty("user.dir")
task buildKubeTestPodConfig(type: Copy) {
    from 'src/test/resources/kube-test-pod.yml'
    into 'build/classes/java/test/com/blackducksoftware/integration/hub/detectws/app'
    filter(ReplaceTokens, tokens: [CURRENT_DIR: System.getProperty("user.dir"), VERSION: version])
}

testIntegration.dependsOn buildKubeTestPodConfig
testIntegration.dependsOn buildImage
